SET(SCINTILLA_SEARCH_PATHS
	${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/lib
	${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include
	${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include/scintilla331
)

SET(MSVC_YEAR_NAME)
IF (MSVC_VERSION GREATER 1599)		# >= 1600
	SET(MSVC_YEAR_NAME VS2010)
ELSEIF(MSVC_VERSION GREATER 1499)	# >= 1500
	SET(MSVC_YEAR_NAME VS2008)
ELSEIF(MSVC_VERSION GREATER 1399)	# >= 1400
	SET(MSVC_YEAR_NAME VS2005)
ELSEIF(MSVC_VERSION GREATER 1299)	# >= 1300
	SET(MSVC_YEAR_NAME VS2003)
ELSEIF(MSVC_VERSION GREATER 1199)	# >= 1200
	SET(MSVC_YEAR_NAME VS6)
ENDIF()

FIND_PATH(SCINTILLA_INCLUDE_DIR
	NAMES Scintilla.h 	
	PATHS ${SCINTILLA_SEARCH_PATHS}
)

FIND_LIBRARY(SCINTILLA_LIBRARY 
	NAMES scintilla3.3.1 libscintilla3.3.1
	HINTS
	NO_DEFAULT_PATH
	NO_CMAKE_ENVIRONMENT_PATH
	NO_CMAKE_SYSTEM_PATH
	NO_SYSTEM_ENVIRONMENT_PATH
	NO_CMAKE_PATH
	CMAKE_FIND_FRAMEWORK NEVER	
	PATH_SUFFIXES lib lib64 win32/Dynamic_Release "Win32/${MSVC_YEAR_NAME}/x64/Release" "Win32/${MSVC_YEAR_NAME}/Win32/Release"
	PATHS ${SCINTILLA_SEARCH_PATHS}
)

# First search for d-suffixed libs
FIND_LIBRARY(SCINTILLA_LIBRARY_DEBUG 
	NAMES scintilla3.3.1d libscintilla3.3.1d
	HINTS
	NO_DEFAULT_PATH
	NO_CMAKE_ENVIRONMENT_PATH
	NO_CMAKE_SYSTEM_PATH
	NO_SYSTEM_ENVIRONMENT_PATH
	NO_CMAKE_PATH
	CMAKE_FIND_FRAMEWORK NEVER
	PATH_SUFFIXES lib lib64 win32/Dynamic_Debug "Win32/${MSVC_YEAR_NAME}/x64/Debug" "Win32/${MSVC_YEAR_NAME}/Win32/Debug"
	PATHS ${SCINTILLA_SEARCH_PATHS}
)

IF(NOT SCINTILLA_LIBRARY_DEBUG)
	# Then search for non suffixed libs if necessary, but only in debug dirs
	FIND_LIBRARY(SCINTILLA_LIBRARY_DEBUG 
		NAMES scintilla libscintilla liblibscintilla
		HINTS
		NO_DEFAULT_PATH
		NO_CMAKE_ENVIRONMENT_PATH
		NO_CMAKE_SYSTEM_PATH
		NO_SYSTEM_ENVIRONMENT_PATH
		NO_CMAKE_PATH
		CMAKE_FIND_FRAMEWORK NEVER
		$ENV{SCINTILLADIR}
		$ENV{SCINTILLA_PATH}
		PATH_SUFFIXES win32/Dynamic_Debug "Win32/${MSVC_YEAR_NAME}/x64/Debug" "Win32/${MSVC_YEAR_NAME}/Win32/Debug"
		PATHS ${SCINTILLA_SEARCH_PATHS}
	)
ENDIF()


IF(SCINTILLA_LIBRARY_DEBUG)
	SET(SCINTILLA_LIBRARIES debug "${SCINTILLA_LIBRARY_DEBUG}")
ENDIF()

IF(SCINTILLA_LIBRARY)
	SET(SCINTILLA_LIBRARIES optimized "${SCINTILLA_LIBRARY}")		# Could add "general" keyword, but it is optional
ENDIF()

# IF(SCINTILLA_LIBRARY)
# 	MESSAGE("IF(SCINTILLA_LIBRARY)") 
# 	IF(SCINTILLA_LIBRARY_DEBUG)
# 		SET(SCINTILLA_LIBRARIES optimized "${SCINTILLA_LIBRARY}" debug "${SCINTILLA_LIBRARY_DEBUG}")
# 	ELSE()
# 		SET(SCINTILLA_LIBRARIES "${SCINTILLA_LIBRARY}")		# Could add "general" keyword, but it is optional
# 	ENDIF()
# ENDIF()

# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(SCINTILLA DEFAULT_MSG SCINTILLA_LIBRARIES SCINTILLA_INCLUDE_DIR)
